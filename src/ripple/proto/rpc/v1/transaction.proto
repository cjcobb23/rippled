syntax = "proto3";

package rpc.v1;

import "rpc/v1/amount.proto";
import "rpc/v1/payment.proto";
import "rpc/v1/meta.proto";
import "rpc/v1/ledger.proto";
import "rpc/v1/transactiontypes.proto";

message GetTransactionRequest {
    // hash of the transaction. 32 bytes
    bytes hash = 1;

    // if true, return data in binary format
    bool binary = 2;

    // min_ledger and max_ledger specify a ledger range to search
    // both must be provided

    LedgerRange ledger_range = 3;
}

message GetTransactionResponse {

    // The actual transaction
    oneof serialized_transaction {
        Transaction transaction = 1;
        // Variable length
        bytes transaction_binary = 2;
    };
    // Sequence number of ledger that contains this transaction
    uint32 ledger_index = 3;

    // 32 bytes
    bytes hash = 4;

    // whether the ledger has been validated
    bool validated = 5;

    // metadata about the transaction
    oneof serialized_meta {
        Meta meta = 6;
        // Variable length
        bytes meta_binary = 7;
    }
}

// A message encompassing all transactions.
message Transaction {
    // The account originating the transaction.
    AccountAddress account = 1;

    // The fee attached to the transaction.
    XRPDropsAmount fee = 2;

    // The sequence number for the transaction.
    uint32 sequence = 3;

    // Data specific to a the type of transaction being submitted.
    oneof transaction_data {
        Payment payment = 4;


        AccountSet account_set = 13;


        AccountDelete account_delete = 14;


        CheckCancel check_cancel = 15;


        CheckCash check_cash = 16;


        CheckCreate check_create = 17;


        DepositPreauth deposit_preauth = 18;


        EscrowCancel escrow_cancel = 19;


        EscrowCreate escrow_create = 20;


        EscrowFinish escrow_finish = 21;


        OfferCancel offer_cancel = 22;


        OfferCreate offer_create = 23;


        PaymentChannelClaim payment_channel_claim = 24;


        PaymentChannelCreate payment_channel_create= 25;


        PaymentChannelFund payment_channel_fund = 26;


        SetRegularKey set_regular_key = 27;


        SignerListSet signer_list_set = 28;


        TrustSet trust_set = 29;

    }

    // Public key of the account which signed the transaction. Variable length
    bytes signing_public_key = 5;

    // Variable length
    bytes signature = 6;

    uint32 flags = 7;

    uint32 last_ledger_sequence = 8;

    uint32 source_tag = 9;

    repeated Memo memos = 10;

    repeated Signer signers = 11;

    bytes account_transaction_id = 12;
}

message Memo {

    // Variable length
    bytes memo_data = 1;

    // Variable length
    bytes memo_format = 2;

    // Variable length
    bytes memo_type = 3;
}

message Signer  {

    AccountAddress account = 1;

    // Variable length
    bytes transaction_signature = 2;

    // Variable length
    bytes signing_public_key = 3;
}


